// Code generated by protoc-gen-go.
// source: koke.proto
// DO NOT EDIT!

package protolocation

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// The request message containing the user's name.
type RpcRequest struct {
	RequestParam string `protobuf:"bytes,1,opt,name=requestParam" json:"requestParam,omitempty"`
}

func (m *RpcRequest) Reset()                    { *m = RpcRequest{} }
func (m *RpcRequest) String() string            { return proto.CompactTextString(m) }
func (*RpcRequest) ProtoMessage()               {}
func (*RpcRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// The response message containing the greetings
type RpcResponse struct {
	ResponseParam string `protobuf:"bytes,1,opt,name=responseParam" json:"responseParam,omitempty"`
}

func (m *RpcResponse) Reset()                    { *m = RpcResponse{} }
func (m *RpcResponse) String() string            { return proto.CompactTextString(m) }
func (*RpcResponse) ProtoMessage()               {}
func (*RpcResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func init() {
	proto.RegisterType((*RpcRequest)(nil), "protolocation.RpcRequest")
	proto.RegisterType((*RpcResponse)(nil), "protolocation.RpcResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for RpcGreeter service

type RpcGreeterClient interface {
	// Sends a greeting
	RpcMethod(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error)
}

type rpcGreeterClient struct {
	cc *grpc.ClientConn
}

func NewRpcGreeterClient(cc *grpc.ClientConn) RpcGreeterClient {
	return &rpcGreeterClient{cc}
}

func (c *rpcGreeterClient) RpcMethod(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := grpc.Invoke(ctx, "/protolocation.RpcGreeter/rpcMethod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RpcGreeter service

type RpcGreeterServer interface {
	// Sends a greeting
	RpcMethod(context.Context, *RpcRequest) (*RpcResponse, error)
}

func RegisterRpcGreeterServer(s *grpc.Server, srv RpcGreeterServer) {
	s.RegisterService(&_RpcGreeter_serviceDesc, srv)
}

func _RpcGreeter_RpcMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcGreeterServer).RpcMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protolocation.RpcGreeter/RpcMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcGreeterServer).RpcMethod(ctx, req.(*RpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcGreeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protolocation.RpcGreeter",
	HandlerType: (*RpcGreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "rpcMethod",
			Handler:    _RpcGreeter_RpcMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor1,
}

func init() { proto.RegisterFile("koke.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 155 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0xce, 0xcf, 0x4e,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x05, 0x53, 0x39, 0xf9, 0xc9, 0x89, 0x25, 0x99,
	0xf9, 0x79, 0x4a, 0x06, 0x5c, 0x5c, 0x41, 0x05, 0xc9, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25,
	0x42, 0x4a, 0x5c, 0x3c, 0x45, 0x10, 0x66, 0x40, 0x62, 0x51, 0x62, 0xae, 0x04, 0xa3, 0x02, 0xa3,
	0x06, 0x67, 0x10, 0x8a, 0x98, 0x92, 0x31, 0x17, 0x37, 0x58, 0x47, 0x71, 0x41, 0x7e, 0x5e, 0x71,
	0xaa, 0x90, 0x0a, 0x17, 0x6f, 0x11, 0x94, 0x8d, 0xac, 0x07, 0x55, 0xd0, 0x28, 0x08, 0x6c, 0x8d,
	0x7b, 0x51, 0x6a, 0x6a, 0x49, 0x6a, 0x91, 0x90, 0x0b, 0x17, 0x67, 0x51, 0x41, 0xb2, 0x6f, 0x6a,
	0x49, 0x46, 0x7e, 0x8a, 0x90, 0xa4, 0x1e, 0x8a, 0x8b, 0xf4, 0x10, 0xce, 0x91, 0x92, 0xc2, 0x26,
	0x05, 0x31, 0x56, 0x89, 0xc1, 0x89, 0x29, 0x80, 0x31, 0x89, 0x0d, 0xac, 0xc0, 0x18, 0x10, 0x00,
	0x00, 0xff, 0xff, 0x40, 0x20, 0x38, 0x21, 0xe2, 0x00, 0x00, 0x00,
}
